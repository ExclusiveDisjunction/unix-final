# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  frontend:
    build: ./frontend
    image: frontend
    environment:
      NODE_ENV: production
    ports:
      - target: 3000
        published: 80
        protocol: tcp
        mode: ingress
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      labels:
        app: front-app
    depends_on:
      - db
      - backend
    healthcheck:
      test: ["CMD", "sh"]
      interval: 10s
      timeout: 5s
      retries: 5
  backend:
    build: ./backend
    image: backend
    ports:
      - "5432:5432"
      - "8080:8080"
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      labels:
        app: back-app
    depends_on:
      - db
    secrets:
      - jwt-token
      - db-password
    environment:
      - DB_HOST=db
      - DB_PASSWORD=/run/secrets/db-password
      - JWT_TOKEN=/run/secrets/jwt-token
    healthcheck:
      test: ["CMD", "sh"]
      interval: 10s
      timeout: 5s
      retries: 5
  db:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=example
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  db-data:
secrets:
  db-password:
    file: db/password.txt
  jwt-token:
    file: db/jwt_token

